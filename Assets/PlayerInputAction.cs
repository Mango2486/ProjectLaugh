//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Players"",
            ""id"": ""3d970397-24f0-45a9-8b6e-be78331f49a3"",
            ""actions"": [
                {
                    ""name"": ""Player_1Move"",
                    ""type"": ""Value"",
                    ""id"": ""95f52604-bfff-415e-acaf-1fe052b2e684"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player_2Move"",
                    ""type"": ""Value"",
                    ""id"": ""580ae2b9-79f1-457b-81b7-1796cbae80fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player_1Interact"",
                    ""type"": ""Button"",
                    ""id"": ""99d9572e-e38c-41b5-be06-4bd461107d2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player_2Interact"",
                    ""type"": ""Button"",
                    ""id"": ""836f6d4e-80c7-42ad-8bc1-303f0637e9d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""3a4863de-11a5-43ce-94fb-51e649a85627"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_1Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4f947cf0-dc9c-45a6-9e6e-2ddf3026802f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_1Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""381deac1-575a-4659-ab8e-93483fdf2bd3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_1Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""2025e369-c110-412e-847e-8ae7968901ed"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_2Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9daee5d6-8b95-483c-837a-b2e03aabfe2c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7dd72c4a-0b1a-4a03-8419-2daafbdb0746"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5910b99d-3637-483f-9e52-25cd39ac16de"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_1Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2426a3d-dda6-496b-8680-2a891d44bf98"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_2Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Players
        m_Players = asset.FindActionMap("Players", throwIfNotFound: true);
        m_Players_Player_1Move = m_Players.FindAction("Player_1Move", throwIfNotFound: true);
        m_Players_Player_2Move = m_Players.FindAction("Player_2Move", throwIfNotFound: true);
        m_Players_Player_1Interact = m_Players.FindAction("Player_1Interact", throwIfNotFound: true);
        m_Players_Player_2Interact = m_Players.FindAction("Player_2Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Players
    private readonly InputActionMap m_Players;
    private List<IPlayersActions> m_PlayersActionsCallbackInterfaces = new List<IPlayersActions>();
    private readonly InputAction m_Players_Player_1Move;
    private readonly InputAction m_Players_Player_2Move;
    private readonly InputAction m_Players_Player_1Interact;
    private readonly InputAction m_Players_Player_2Interact;
    public struct PlayersActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayersActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player_1Move => m_Wrapper.m_Players_Player_1Move;
        public InputAction @Player_2Move => m_Wrapper.m_Players_Player_2Move;
        public InputAction @Player_1Interact => m_Wrapper.m_Players_Player_1Interact;
        public InputAction @Player_2Interact => m_Wrapper.m_Players_Player_2Interact;
        public InputActionMap Get() { return m_Wrapper.m_Players; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayersActions set) { return set.Get(); }
        public void AddCallbacks(IPlayersActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayersActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayersActionsCallbackInterfaces.Add(instance);
            @Player_1Move.started += instance.OnPlayer_1Move;
            @Player_1Move.performed += instance.OnPlayer_1Move;
            @Player_1Move.canceled += instance.OnPlayer_1Move;
            @Player_2Move.started += instance.OnPlayer_2Move;
            @Player_2Move.performed += instance.OnPlayer_2Move;
            @Player_2Move.canceled += instance.OnPlayer_2Move;
            @Player_1Interact.started += instance.OnPlayer_1Interact;
            @Player_1Interact.performed += instance.OnPlayer_1Interact;
            @Player_1Interact.canceled += instance.OnPlayer_1Interact;
            @Player_2Interact.started += instance.OnPlayer_2Interact;
            @Player_2Interact.performed += instance.OnPlayer_2Interact;
            @Player_2Interact.canceled += instance.OnPlayer_2Interact;
        }

        private void UnregisterCallbacks(IPlayersActions instance)
        {
            @Player_1Move.started -= instance.OnPlayer_1Move;
            @Player_1Move.performed -= instance.OnPlayer_1Move;
            @Player_1Move.canceled -= instance.OnPlayer_1Move;
            @Player_2Move.started -= instance.OnPlayer_2Move;
            @Player_2Move.performed -= instance.OnPlayer_2Move;
            @Player_2Move.canceled -= instance.OnPlayer_2Move;
            @Player_1Interact.started -= instance.OnPlayer_1Interact;
            @Player_1Interact.performed -= instance.OnPlayer_1Interact;
            @Player_1Interact.canceled -= instance.OnPlayer_1Interact;
            @Player_2Interact.started -= instance.OnPlayer_2Interact;
            @Player_2Interact.performed -= instance.OnPlayer_2Interact;
            @Player_2Interact.canceled -= instance.OnPlayer_2Interact;
        }

        public void RemoveCallbacks(IPlayersActions instance)
        {
            if (m_Wrapper.m_PlayersActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayersActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayersActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayersActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayersActions @Players => new PlayersActions(this);
    public interface IPlayersActions
    {
        void OnPlayer_1Move(InputAction.CallbackContext context);
        void OnPlayer_2Move(InputAction.CallbackContext context);
        void OnPlayer_1Interact(InputAction.CallbackContext context);
        void OnPlayer_2Interact(InputAction.CallbackContext context);
    }
}
